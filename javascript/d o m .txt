##### D O M #####

##### document navigation #####

document.documentElement - обратиться к тегу <html></html>

document.head - обратиться к тегу head

bodyElement = document.body - обратиться к тегу body

bodyElement.childNodes - получить все узлы документов в коллекции, в том числе и символы перевода строки

.parentElement - обратиться к родителю текущего элемента

.previousElementSibling - предыдущий html элемент на том же уровне вложенности

.nextElementSibling - следующий html элемент на том же уровне вложенности

.children - получить коллекцию из дочерних html элементов

.firstElementChild - получить доступ к первому дочернему html тегу текущего элемента

.lastElementChild - получить доступ к последнему дочернему html тегу текущего элемента

##### querySelector #####

elems = .querySelectorAll('.class') - обратиться к html документу по классу (также можно обращаться по тегу, по смешанным селекторам, по id, по атрибуту [])

elems[2] - можно обратиться к каждому элементу по индексу

.querySelector('.class') - возвращает первый объект с указанным классом

.closest('.class') - возвращает ближайшего родителя с указанным классом, либо Null если такого родителя нет



##### getElement #####

.getElementById('id') - найти элемент по id (id пишется без решетки)

.getElementsByTagName('li') - получить живую коллекцию объектов по тегу

.getElementsByClassName('class') - получить живую коллекцию объектов по классу

.getElementsByName('name') - получить живую коллекцию объектов по атрибуту name


##### edit #####

container = title.innerHTML - с помощью innerHTML можно получать содержащийся в элементе html код и записывать его в переменную

title.innerHTML = `Hello, world! <a href='#'>link</a>` - с помощью innerHTML можно добавлять текст в html разметку, используя любые html теги

.outerHTML - помимо содержимого элемента, получаем или добавляем html разметку самого объекта

.textContent - можно получить или добавить только текст без html разметки, запись и получение текста безопасным способом

.innerText - вставляет текст

##### create #####

.createElement('div') - создать элемент с указанным тегом


##### paste #####

.before(title) - метод вставки перед указанным объектом (можно вставлять несколько объектов через запятую) (удаляет существующий элемент)

.after(title) - метод вставки после указанного объекта (удаляет существующий элемент)

.prepend(title) - метод вставки внутри указанного объекта перед его содержимым (удаляет существующий элемент)

.append(title) - метод вставки внутри указанного объекта после его содержимого (удаляет существующий элемент)

.appendChild(title) 


##### incertAdjacentHTML #####

.incertAdjacentHTML('аргумент', `Hello, world! <a href='#'>link</a>`) - метод вставки html

'beforebegin' - аргумент вставки перед указанным объектом
'afterbegin' - аргумент вставки внутри указанного объекта перед его содержимым
'beforeend' - аргумент вставки внутри указанного объекта после его содержимого
'afterend' - аргумент вставки после указанного объекта


##### clone #####

.cloneNode(true) - глубокое клонирование со всем содержимым (в связке с append можно клонировать элементы)


##### remove #####

title.remove() - удаляет html элемент


##### CSS classes #####

.className - получаем все классы указанного элемента

.className = 'red' - заменяем все классы указанного элемента на указанные

.classList.add('new') - добавляем новый класс указанному элементу

.classList.remove('new') - удаляем указанный класс у элемента

.classList.toggle('new') - добавляем новый класс указанному если у элемента его нет и удаляем указанный класс если он присутствует

.classList.contains('new') - возвращает true и false есть ли такой класс у элемента

for (let className of element.classList) {
console.log(className);
} - с помощью цикла мы можем перебрать все классы у указанного элемента

.setAttribute('class', 'redtext') - установка класса с помощью setAttribute

.getAttribute('class') - получить значение атрибута с помощью setAttribute

##### style #####

.style.color='red' - свойство style меняет css

.matginBottom, .zIndex

.style.cssText = `
margin-bottom: 30px` - перезаписать свойство style

getComputedStyle(element) - получить вычисленные стили


#####  #####

link.href - получить у элемента ссылка значение свойства href

.hidden - скрыть объект