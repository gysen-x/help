n##### J E S T #####

1. npm init -y - инициализация файла package.json

2. npm install -D jest - установка jest в ДЕВ

3. Создать в корне папку /spec или /test

4. Добавить в package.json:

"scripts": {
  "test": "jest"
}

5. npm test или npm jest - запуск теста

6. Поместить в папку test файл с расширением *.test.js или *.spec.js, в котором пишется сам тест:

const processArray = require("../index"); // импорт переменной функции из index.js

describe("Тесты функции обработки массива", () => { // описание раздела
  describe("Общие тесты", () => { // описание подраздела
    test("Возвращает ли функция массив?", () => { // указание имени теста
      const array = []; 
      expect(Array.isArray(processArray(array))).toBe(true); // expect - указание проверяемого значения, toBe() - метод, который указывает на абсолютное равенство значений
    });
    test("Возвращает ли функция пустой массив?", () => {
      const array = [];
      expect(processArray(array)).toEqual([]); // toEqual() - метод, который указывает на равенство свойств объекта
    });
  });
  describe("Функциональные тесты", () => {
    test("Удаляет ли функция дублирующиеся элементы?", () => {
      const array = [1, 2, 2, 3, 2, 4, 3];
      expect(processArray(array)).toEqual([1, 2, 3, 4]);
    });
    test("Заменяет ли функция отрицательные значения на *?", () => {
      const array = [1, -2, 2, -3, 2, -4, 3];
      expect(processArray(array)).toEqual([1, "*", 2, "*", "*", 3]);
    });
  });
});

Основные методы Jest:

describe(description, specDefinitions) - Создаёт группу тестов. Вызовы метода describe могут вкладываться друг в друга, что позволяет создавать подгруппы тестов.
beforeEach(functionopt, timeoutopt) - Метод, код внутри которого будет запускаться перед запуском каждого теста(test или it). Таким образом, тут можно задавать значения переменных, необходимые для тестов, подготавливать БД, и тд.
test(description, testFunctionopt, timeoutopt) Определяет тест(или spec). Тест должен содержать 1 или более вызовов метода expect (ожидания от работы вашего кода). Если все вызовы expect внутри test успешны - тесты пройдут, иначе выдадут ошибку.
expect(actual) → {matchers} Создаёт ожидание для теста. Например: expect(sum(2,3)).toEqual(5) - ожидается, что результат вызова метода sum с аргументами 2 и 3 будет равен 5. То есть 2+3=5. matchers - то что ожидается (toEqual(5), toBeFalsy(), toBeUndefined(), toContain(2) и тд). Больше тут.
