##### G I T #####

Нужно научиться грамотно писать комментарии к коммитам!!!!!

Репозиторий состоит из трех деревьев:
1. Рабочая директория
2. Индекс - область подготовленных файлов
3. Хед - указатель на последний коммит

Три состояния файла
1. Закоммичен commited
2. Изменен not staged
3. Готов к коммиту staged

git -v - проверить гит версию
git log - вся история коммитов
git log --pretty=format:"%H [%cd]: %an - %s" --graph --date=format:%c - история коммитов в табличном виде

git init - создать репозиторий
git status - состояние файлов в папке
git show - информация о последнем коммите и его содержимом
git commit -m "Comment" - сохранение состояния файла
git log - состояние репозитория


##### ADD #####

git add *** (имя файла) - добавить файл в индекс (чтобы гит за ним следил)
git add . - добавить все файлы из папки

git restore --staged *** - убрать файл *** из индекса
git rm --cached *** - удалить статус отслеживания у файла ***
git restore *** - отменить изменения в файле ***

git reset --hard - удаление всех незакомиченных изменений, даже если они добавлены в индекс
git clean -f - удалить все изменения, даже в файлах неотслеживаемых индексом


##### COMMIT #####

Названия коммитов: Что сделать + для какой сущности + подробности

git commit -m "Some changes"

git commit --amend - изменить последний коммит
git commit --amend -m 'New comment' - переименовать последний коммит
git commit --amend --no-edit - добавить файлы в последний коммит без изменения имени


##### GITHUB #####

git remote -v - просмотреть связку локального и удаленного репозиториев
git remote add origin https://github.com/gysen-x/help.git - создасть связку локального и удаленного репозитория (переменная origin = https://github.com/gysen-x/help.git)
git remote remove origin - удалить связку с удаленным репозиторием

git branch -u origin/advanced advanced - связать удаленную ветку advanced с локальной веткой advanced


git push -u origin main - при первоначальном пуше (-u - устанавливает связь между репозиториями чтобы в дальнейшем отправлять без параметров) (--set-upstream = -u)
git push - закинуть свои изменения на сервер
git pull - затянуть все изменения с сервера

git pull origin master - забрать из ветки origin в ветку master
git push origin dev - отправить из ветки dev в ветку master


Не создавая связь между ветками можно перенести изменения из конкретной ветки в другую
git push origin main - Перейди в ветку с именем "main" в моём локальном репозитории, возьми все коммиты и затем перейди на ветку "main" на удалённом репозитории "origin.". На эту удалённую ветку скопируй все отсутствующие коммиты, которые есть у меня, и скажи, когда ты закончишь.


git push origin foo^:main - <источник>:<получатель> - в источнике можно помимо ветки указать конкретный коммит, который мы хотим перенести в удаленный репозиторий. В качестве получателя можно указать не существующую ветку и она создастся на удаленном репозитории.

git push origin :*** - если использовать команду push с пустым аргументом <источник>, то ветка *** будет удалена  в удаленном и локальном репозиториях. Ты отправляешь пустоту в удаленную ветку, что-то типа умножения на 0


##### FETCH #####

git fetch - скачать коммиты из удаленного репозитория в локальный origin/master

git fetch origin :*** - если ввести несуществующую ветку ***, то команда будет аналогична git branch ***

git pull = git fetch + git merge - данная команда копирует изменения с удаленного репозитория и сливает локальный и скачанный коммиты в новый коммит

git pull --rebase = git fetch + git rebase - данная команда копирует изменения с удаленного репозитория и создает новый коммит с изменениями без мерджа

git pull origin foo:main - <источник>:<получатель> - скачать данные из удаленной ветки foo в локальную ветку main, после чего смержить скачанную ветку с текущей, создав новый коммит

git checkout -b *** origin/master - создать ветку *** и связать ее с веткой master удаленного репозитория
git branch -u origin/master *** - создать связь между веткой *** и удаленной master


##### .GITIGNORE #####

- логи
- пользовательские файлы
- служебные файлы среды разработки
- внешние библиотеки
- файлы локальной конфигурации
- файлы операционной системы
- слишком большие файлы

.gitignore
txt.logs - можно указать имя файла, чтобы он не отслеживался
*.logs - можно указать формат файла, чтобы он не отслеживался
logs/ - можно указать папку, чтобы она не отслеживалась
logs/*.log - все файлы указанного формата в данной папке не будут отслеживаться
!txt.log - не исключать данный файл (если папка полностью исключена, то не будет работать)

*.log - маска для формата файла
logs/ - исключить папку
!logs/sample.log - отрицание паттерна


##### GIT CLONE #####

git clone https://github.com/gysen-x/new-project.git - склонировать репозиторий на свой компьютер (в текущем каталоге создастся папка с названием репозитория)
git clone https://github.com/gysen-x/new-project.git *** - склонировать репозиторий и назвать его ***
При клонировании репозитория вместе с файлами клонируются ветки

Папка с клонированным репозиторием создается в текущей директории с тем же названием

При переносе каталога в другое место, с ним также переносятся его ветки

При копировании каталога, с ним также копируются его ветки


##### КОНФЛИКТ ВЕРСИЙ #####

VI - редактор коммита (esc - выйти, :wq - оставить стандартное название коммита)
Unmerged paths: both modified
в среде разработки будет оба изменения


##### BRANCH #####

git branch - показать локальные ветки
git branch -a - показать локальные и удаленные ветки
git branch *** - создать ветку *** и остаться в текущей
git checkout -b *** - создать новую ветку *** и переключиться на нее

git branch -m *** - переименовать ветку в ***
git branch -d *** - удалить ветку *** (работает после мерджа)
git branch -D *** - жестко удалить ветку *** 


##### CHECKOUT #####

git checkout master - переключиться на ветку "master"
При переключении ветки все файлы, находящиеся в папке отображаются в том виде, в котором они были сохранены в данную ветку.
При переключении обратно на актуальную ветку все изменения снова отражаются в файлах.

git push -u origin *** - создать ветку *** на удаленном репозитории, связать с ней локальную и сделать пуш


##### STASH #####

git stash - сохранить все незакоммиченные изменения в статусе WIP (work in progress)
git stash pop - восстановить WIP элементы
git stash list - посмотреть все отложенные изменения
git stash drop 0 - удалить стэш №0

#####в случае если ошибся веткой
можно закинуть в стэш в одной ветке, перейти в другую ветку, вставить из стэша
1. git stash
2. git checkout ***
3. git stash pop


##### MERGE #####

Merge - это слияние изменений из двух коммитов в один.
При мердже мы указываем коммит, который хотим влить в текущую ветку.

git merge *** - вливаем ветку *** в текущую ветку

git reset --merge - отменить мердж, сбрасывает только закоммиченные изменения

git merge --abort - вернуть к состоянию до мерджа, можно откатить неудачный merge, в котором произошёл конфликт


##### REBASE #####

Rebase - копирует набор коммитов и переносит в другое место. Он похож на мердж, но при мердже у последнего коммита возникает два родительских коммита, а при rebase у него только один коммит. Таким образом структура веток становится более линейная.
При ребэйзе мы указываем куда хотим перебазировать текущий коммит и текущая ветка встает в конец указанной. 

git rebase main - скопировать изменения в коммите из текущей ветки в ветку main не объединяя их, при этом ветка main останется на один коммит позади
git rebase *** main - сдвигаем ссылку ветки main на коммит, созданный ребэйзом

###интерактивный rebase###
git rebase -i HEAD~4 - открытие редактора для интерактивного изменения четырех последних коммитов, порядок которых хочешь изменить. Можно изменять порядок коммитов, удалять и совмещать с помощью редактора.


##### DIFF #####

git diff *** - посмотреть изменения в измененном файле *** (выводит все изменения, сделанные после первого коммита до второго включительно)
git diff - посмотреть изменения во всех измененных файлах
git diff bd17 a5dd *** - сравнить изменения в коммитах bd178b5ba104998bd51e1f5f8fe22aeef7dd9ff4 и a5ddd50edfc77bb049a71fd92ab22fa2f94d15b6 в файле *** (указать первые 4 символа хэша)
#####Сравнивать можно коммиты из разных веток по хэшу
git diff bd17 a5dd - сравнить изменения в коммитах bd178b5ba104998bd51e1f5f8fe22aeef7dd9ff4 и a5ddd50edfc77bb049a71fd92ab22fa2f94d15b6 во всех файлах
#####Сравнивать можно два любых файла даже вне репозиториев
git diff *** *** - сравнить файл *** и файл ***

git blame *** - посмотреть изменения других пользователей в файле ***


##### HEAD #####

HEAD - текущий коммит, в котором в настоящее время вносятся изменения (по умолчанию он соотносится с последним коммитом в ветке, но его можно отделить)

git checkout ha5h - отделить HEAD от ветки и присвоить конкретному коммиту c хэшем ha5h
git checkout ***^ - присвоить HEAD родителю последнего коммита в ветке ***
git checkout ***^^ - присвоить HEAD прародителю последнего коммита в ветке ***

HEAD^ = HEAD~1 - указание на родителя HEAD
HEAD^^ = HEAD~2 - указание на прародителя HEAD
HEAD~3 - указание на 3 коммита выше чем HEAD 

git reflog - журнал всех обновлений, в т.ч. переключение веток, сброс, коммит, объединение

##### BRANCH-FORSING #####

git branch -f *** HEAD~2 - перенести конец ветки *** на указанный коммит - HEAD~2

git checkout bd17 *** - возврат файла *** к комиту bd17 до изменений и добавлен в индекс


##### REVERT & RESET #####

RESET - удаляет последние коммиты, как будто их и не было. Данная команда работает только в локальных репозиториях и удаляет только коммиты, все изменения в локальных файлах остаются, но они переходят в статус неотслеживаемых. 
Для удаленных репозиториев используется REVERT.

git reset HEAD~1 - откатить к предпоследнему коммиту в локальном репозитории

git reset --soft bd17 - откатить к коммиту bd17 в мягком режиме (файлы добавлены в индекс)
git reset --mix bd17 - откатить к коммиту bd17 в смешанном режиме (файлы удалены из индекса)
git reset --hard bd17 - откатить к коммиту bd17 в жестком режиме (файлы полностью удалены, все коммиты полностью удалены)

git reset ‘HEAD@{1}’ - отменить git reset

REVERT - вместо удаления последнего коммита целиком, создает новый коммит, в котором отсутствуют лишние данные из последнего коммита

git revert bd17 - вернуть данные к состоянию аналогичному данным в коммите bd17 путем создания нового коммита (:wq - выйти)
??? git revert --no-commit bd17 - если нужно удалить несколько коммитов


##### CHERRY PICK #####

git cherry-pick *** *** - копирует несколько коммитов на место, где сейчас находится HEAD


##### TAG #####

TAG - это постоянная ссылка на какой-то коммит. Работает как точка восстановления до определенной версии проекта.

git tag v1 ha5h - создать тег v1 для коммита ha5h

git describe *** - показывает, как далеко текущее состояние от HEAD, ближайшего тега или от конца ветки.
<tag>_<numCommits>_g<hash> - v1_1_gC4

##### BRANCH #####

Предположим, что это то, как изначально выглядят коммиты в вашем репозитории, на ветке master:

A -> B -> C -> D -> E
                    |
                    |\- master
                    |
                     \- origin/master

Это сразу после того, как вы клонировали репозиторий. Вы сделали новый коммит в своей локальной ветке master:

A -> B -> C -> D -> E -> F
                    |    |
                    |     \- master
                    |
                     \- origin/master

Итак, здесь следует обратить внимание на две вещи.

Предполагая, что кто-то другой на удаленном компьютере не выполняет никаких действий origin, нет ничего нового для извлечения. Итак git fetch origin master, в этом нет ничего нового.

Если вы это сделаете git merge origin/master, опять же, объединять нечего. origin/master является префиксом master. Другими словами, master уже содержит все имеющиеся коммиты origin/master, поэтому нет ничего нового для объединения.

Если бы вы использовали fetchи merge вместо pull, вы могли бы легко понять, какая часть двойной команды (pull) является той, которая приводит к неожиданному (по вашему мнению) поведению.

Конечно, после a git push origin master вы получите:

A -> B -> C -> D -> E -> F
                         |
                         |\- master
                         |
                          \- origin/master
