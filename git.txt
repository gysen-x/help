##### G I T #####
Репозиторий состоит из трех деревьев:
1. Рабочая директория
2. Индекс - область подготовленных файлов
3. Хед - указатель на последний коммит

Три состояния файла
1. Закоммичен commited
2. Изменен not staged
3. Готов к коммиту staged

git -v - проверить гит версию
git log - вся история коммитов
git init - создать репозиторий
git status - состояние файлов в папке
git show - информация о последнем коммите и его содержимом
git commit -m "Comment" - сохранение состояния файла
git log - состояние репозитория


##### ADD #####
git add *** (имя файла) - добавить файл в индекс (чтобы гит за ним следил)
git add . - добавить все файлы из папки

git restore --staged *** - убрать файл *** из индекса
git rm --cached *** - удалить статус отслеживания у файла ***
git restore *** - отменить изменения в файле ***

git reset --hard - удаление всех незакомиченных изменений, даже если они добавлены в индекс
git clean -f - удалить все изменения, даже в файлах неотслеживаемых индексом


##### COMMIT #####
git commit -m "Some changes"
Названия коммитов
Что сделать + для какой сущности + подробности
1. Файл закоммичен
2. Файл изменен - git add .
3. Файл готов к коммиту - git commit -m "Comment"

git commit --amend -m 'New comment' - переименовать последний коммит
git commit --amend --no-edit - добавить файлы в последний коммит без изменения имени

##### GITHUB #####
git remote -v - просмотреть связку локального и удаленного репозиториев
git remote add origin https://github.com/gysen-x/help.git - создасть связку локального и удаленного репозитория (переменная origin = https://github.com/gysen-x/help.git)
git remote remove origin - удалить связку с удаленным репозиторием

git push -u origin main - при первоначальном пуше (-u - устанавливает связь между репозиториями чтобы в дальнейшем отправлять без параметров) (--set-upstream = -u)
git push - закинуть свои изменения на сервер
git pull - затянуть все изменения с сервера

git pull origin master - забрать из ветки origin в ветку master
git push origin dev - отправить из ветки dev в ветку master


##### .GITIGNORE #####
- логи
- пользовательские файлы
- служебные файлы среды разработки
- внешние библиотеки
- файлы локальной конфигурации
- файлы операционной системы
- слишком большие файлы

.gitignore
txt.logs - можно указать имя файла, чтобы он не отслеживался
*.logs - можно указать формат файла, чтобы он не отслеживался
logs/ - можно указать папку, чтобы она не отслеживалась
logs/*.log - все файлы указанного формата в данной папке не будут отслеживаться
!txt.log - не исключать данный файл (если папка полностью исключена, то не будет работать)

*.log - маска для формата файла
logs/ - исключить папку
!logs/sample.log - отрицание паттерна


##### GIT CLONE #####
git clone https://github.com/gysen-x/new-project.git - склонировать репозиторий на свой компьютер (в текущем каталоге создастся папка с названием репозитория)
git clone https://github.com/gysen-x/new-project.git *** - склонировать репозиторий и назвать его ***
При клонировании репозитория вместе с файлами клонируются ветки

Папка с клонированным репозиторием создается в текущей директории с тем же названием

При переносе каталога в другое место, с ним также переносятся его ветки

При копировании каталога, с ним также копируются его ветки


##### КОНФЛИКТ ВЕРСИЙ #####
VI - редактор коммита (esc - выйти, :wq - оставить стандартное название коммита)
Unmerged paths: both modified
в среде разработки будет оба изменения


##### BRANCH #####
git branch - показать локальные ветки
git branch -a - показать локальные и удаленные ветки
git branch *** - создать ветку *** и остаться в текущей
git checkout -b *** - создать новую ветку *** и переключиться на нее
git checkout master - переключиться на ветку "master"
При переключении ветки все файлы, находящиеся в папке отображаются в том виде, в котором они были сохранены в данную ветку.
При переключении обратно на актуальную ветку все изменения снова отражаются в файлах.

git push -u origin *** - отправить ветку на удаленный репозиторий и связать ее с веткой ***

git branch -m *** - переименовать ветку в ***
git branch -d *** - удалить ветку *** (работает после мерджа)
git branch -D *** - жестко удалить ветку *** 

##### STASH #####
git stash - сохранить все незакоммиченные изменения в статусе WIP (work in progress)
git stash pop - восстановить WIP элементы
git stash list - посмотреть все отложенные изменения
git stash drop 0 - удалить стэш №0

#####в случае если ошибся веткой
можно закинуть в стэш в одной ветке, перейти в другую ветку, вставить из стэша
1. git stash
2. git checkout ***
3. git stash pop


##### MERGE #####
git merge *** - вливаем ветку *** в текущую ветку

git reset --merge - отменить мердж, сбрасывает только закоммиченные изменения

git merge --abort - вернуть к состоянию до мерджа, можно откатить неудачный merge, в котором произошёл конфликт



##### DIFF #####
git diff *** - посмотреть изменения в измененном файле *** (выводит все изменения, сделанные после первого коммита до второго включительно)
git diff - посмотреть изменения во всех измененных файлах
git diff bd17 a5dd *** - сравнить изменения в коммитах bd178b5ba104998bd51e1f5f8fe22aeef7dd9ff4 и a5ddd50edfc77bb049a71fd92ab22fa2f94d15b6 в файле *** (указать первые 4 символа хэша)
#####Сравнивать можно коммиты из разных веток по хэшу
git diff bd17 a5dd - сравнить изменения в коммитах bd178b5ba104998bd51e1f5f8fe22aeef7dd9ff4 и a5ddd50edfc77bb049a71fd92ab22fa2f94d15b6 во всех файлах
#####Сравнивать можно два любых файла даже вне репозиториев
git diff *** *** - сравнить файл *** и файл ***

git blame *** - посмотреть изменения других пользователей в файле ***


##### CHECKOUT #####
git checkout bd17 *** - возврат файла *** к комиту bd17 до изменений и добавлен в индекс

git revert bd17 - удалить изменения в коммите bd17 (:wq - выйти)
git revert --no-commit bd17 - если нужно удалить несколько коммитов

git reset --soft bd17 - откатить к коммиту bd17 в мягком режиме (файлы добавлены в индекс)
git reset --mix bd17 - откатить к коммиту bd17 в смешанном режиме (файлы удалены из индекса)
git reset --hard bd17 - откатить к коммиту bd17 в жестком режиме (файлы полностью удалены, все коммиты полностью удалены)
git reset HEAD~1 - откатить к предпоследнему коммиту